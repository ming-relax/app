{{ define "formation" }}
  {
    "AWSTemplateFormatVersion" : "2010-09-09",
    "Conditions": {
      {{ template "process-conditions" . }}
      "BlankCluster": { "Fn::Equals": [ { "Ref": "Cluster" }, "" ] }
    },
    "Parameters" : {
      {{ template "balancer-params" . }}
      {{ template "process-params" . }}

      "Cluster": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Cpu": {
        "Type": "Number",
        "Default": "200",
        "Description": "CPU shares of each process"
      },
      "DesiredCount": {
        "Type" : "Number",
        "Default" : "1",
        "Description" : "The number of instantiations of the specified ECS task definition to place and keep running on your cluster."
      },
      "Environment": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Key": {
        "Type": "String",
        "Default": "",
        "Description": ""
      },
      "Memory": {
        "Type": "Number",
        "Default": "256",
        "Description": "MB of RAM to reserve"
      },
      "Release": {
        "Type" : "String",
        "Default" : "",
        "Description" : ""
      },
      "Repository": {
        "Type" : "String",
        "Default" : "",
        "Description" : "Source code repository"
      },
      "Subnets": {
        "Type" : "List<AWS::EC2::Subnet::Id>",
        "Default" : "",
        "Description" : "VPC subnets for this app"
      },
      "Version": {
        "Default": "latest",
        "Description": "Convox release version",
        "Type": "String"
      },
      "VPC": {
        "Type" : "AWS::EC2::VPC::Id",
        "Default" : "",
        "Description" : "VPC for this app"
      },
      "CustomTopic": {
        "AllowedPattern": "arn:aws:.*",
        "ConstraintDescription": "must be an ARN",
        "Description": "Bootstrap ARN (Lambda or SNS)",
        "Type": "String"
      }
    },
    "Resources": {
      {{ template "balancer-resources" . }}
      {{ template "process-resources" . }}

      {{ template "security" }}
      {{ template "state" }}
    },
    "Outputs": {
      {{ template "balancer-outputs" . }}
      {{ template "process-outputs" . }}

      "Settings": {
        "Value": { "Ref": "Settings" }
      }
    }
  }
{{ end }}

{{ define "process-conditions" }}
  {{ range $k := .EntryNames }}
    "Blank{{ upper $k }}Service": { "Fn::Equals": [ { "Ref": "{{ upper $k }}Service" }, "" ] },
  {{ end }}
{{ end }}

{{ define "process-params" }}
  {{ range $k, $e := . }}
    "{{ upper $k }}Command": {
      "Type" : "String",
      "Default" : "{{ command $e.Command }}",
      "Description" : ""
    },
    "{{ upper $k }}Image": {
      "Type" : "String",
      "Default" : "",
      "Description" : ""
    },
    "{{ upper $k }}Service": {
      "Type" : "String",
      "Default" : "",
      "Description" : ""
    },
  {{ end }}
{{ end }}

{{ define "process-outputs" }}
  "Kinesis": {
    "Value": { "Ref": "Kinesis" }
  },
{{ end }}

{{ define "process-resources" }}
  "Kinesis": {
    "Type": "AWS::Kinesis::Stream",
    "Properties": {
      "ShardCount": 1
    }
  },
  {{ if .HasProcesses }}
    "LogsUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/convox/",
        "Policies": [
          {
            "PolicyName": "LogsRole",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [ "kinesis:PutRecords" ],
                  "Resource": [ { "Fn::Join": [ "", [ "arn:aws:kinesis:*:*:stream/", { "Ref": "AWS::StackName" }, "-*" ] ] } ]
                }
              ]
            }
          }
        ]
      }
    },
    "LogsAccess": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "Serial": "1",
        "Status": "Active",
        "UserName": { "Ref": "LogsUser" }
      }
    },
    "TaskDefinition": {
      "Type": "Custom::ECSTaskDefinition",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": { "Ref": "CustomTopic" },
        "Region": { "Ref": "AWS::Region" },
        "Name": { "Ref": "AWS::StackName" },
        "Release": { "Ref": "Release" },
        "Environment": { "Ref": "Environment" },
        "Key": { "Ref": "Key" },
        "Tasks": [
          {{ tasks . }}
        ]
      }
    },
    "Service": {
      "Type": "Custom::ECSService",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": { "Ref": "CustomTopic" },
        "Cluster": { "Ref": "Cluster" },
        "DesiredCount": { "Ref": "DesiredCount" },
        "Name": { "Ref": "AWS::StackName" },
        "TaskDefinition": { "Ref": "TaskDefinition" },
        "Role": { "Ref": "ServiceRole" },
        "Region": { "Ref": "AWS::Region" },
        "LoadBalancers": [ {{ loadbalancers . }} ]
      }
    },
  {{ end }}
{{ end }}

{{ define "balancer-params" }}
  {{ range $ps, $entry := . }}
    {{ range $i, $port := $entry.Ports }}
      {{ $parts := (split $port ":") }}
      "{{ upper $ps }}Port{{ index $parts 0 }}Balancer": {
        "Type" : "String",
        "Default" : "{{ index $parts 0 }}",
        "Description" : ""
      },
      "{{ upper $ps }}Port{{ index $parts 0 }}Host": {
        "Type" : "String",
        "Default" : "{{ index $entry.Randoms $i }}",
        "Description" : ""
      },
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-outputs" }}
  "BalancerHost": {
    "Value": { "Fn::GetAtt": [ "Balancer", "DNSName" ] }
  },
  {{ range $ps, $entry := . }}
    {{ if $entry.HasPorts }}
      {{ range $entry.Ports }}
        {{ $parts := (split . ":") }}
        "{{ upper $ps }}Port{{ index $parts 0 }}Balancer": {
          "Value": { "Ref": "{{ upper $ps }}Port{{ index $parts 0 }}Balancer" }
        },
      {{ end }}
    {{ end }}
  {{ end }}
{{ end }}

{{ define "balancer-resources" }}
  "BalancerSecurityGroup": {
    "Type": "AWS::EC2::SecurityGroup",
    "Properties": {
      "GroupDescription": { "Fn::Join": [ " ", [ { "Ref": "AWS::StackName" }, "-balancer" ] ] },
      "SecurityGroupIngress": [ {{ ingress . }} ],
      "VpcId": { "Ref": "VPC" }
    }
  },
  "Balancer": {
    "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
    "Properties": {
      "Subnets": { "Ref": "Subnets" },
      "ConnectionDrainingPolicy": { "Enabled": true, "Timeout": 60 },
      "ConnectionSettings": { "IdleTimeout": 60 },
      "CrossZone": true,
      "HealthCheck": {
        "HealthyThreshold": "2",
        "Interval": 5,
        "Target": {{ .FirstCheck }},
        "Timeout": 3,
        "UnhealthyThreshold": "2"
      },
      "Listeners": [ {{ listeners . }} ],
      "LBCookieStickinessPolicy": [{ "PolicyName": "affinity" }],
      "LoadBalancerName": { "Ref": "AWS::StackName" },
      "SecurityGroups": [ { "Ref": "BalancerSecurityGroup" } ]
    }
  },
{{ end }}

{{ define "security" }}
  "ServiceRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Statement": [
          {
            "Action": [
              "sts:AssumeRole"
            ],
            "Effect": "Allow",
            "Principal": {
              "Service": [
                "ecs.amazonaws.com"
              ]
            }
          }
        ],
        "Version": "2012-10-17"
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "ServiceRole",
          "PolicyDocument": {
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "elasticloadbalancing:Describe*",
                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                  "ec2:Describe*",
                  "ec2:AuthorizeSecurityGroupIngress"
                ],
                "Resource": [
                  "*"
                ]
              }
            ]
          }
        }
      ]
    }
  },
{{ end }}

{{ define "state" }}
  "Settings": {
    "Type": "AWS::S3::Bucket",
    "DeletionPolicy": "Retain",
    "Properties": {
      "AccessControl": "Private",
      "Tags": [
        { "Key": "system", "Value": "convox" },
        { "Key": "app", "Value": { "Ref": "AWS::StackName" } }
      ]
    }
  },
  "SettingsCleanup": {
    "Type": "Custom::S3BucketCleanup",
    "Properties": {
      "Bucket": { "Ref": "Settings" },
      "Region": { "Ref": "AWS::Region" },
      "ServiceToken": { "Ref": "CustomTopic" }
    }
  }
{{ end }}
